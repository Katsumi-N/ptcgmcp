// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: deck.sql

package dbgen

import (
	"context"
	"database/sql"
)

const createDeck = `-- name: CreateDeck :execresult
INSERT INTO decks (
  name,
  description,
  main_card_id,
  main_card_type_id,
  sub_card_id,
  sub_card_type_id
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreateDeckParams struct {
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	MainCardID     sql.NullInt64  `json:"main_card_id"`
	MainCardTypeID sql.NullInt64  `json:"main_card_type_id"`
	SubCardID      sql.NullInt64  `json:"sub_card_id"`
	SubCardTypeID  sql.NullInt64  `json:"sub_card_type_id"`
}

func (q *Queries) CreateDeck(ctx context.Context, arg CreateDeckParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createDeck,
		arg.Name,
		arg.Description,
		arg.MainCardID,
		arg.MainCardTypeID,
		arg.SubCardID,
		arg.SubCardTypeID,
	)
}

const createDeckCard = `-- name: CreateDeckCard :execresult
INSERT INTO deck_cards (
  deck_id,
  card_id,
  card_type_id,
  quantity
) VALUES (
  ?, ?, ?, ?
)
`

type CreateDeckCardParams struct {
	DeckID     int64 `json:"deck_id"`
	CardID     int64 `json:"card_id"`
	CardTypeID int64 `json:"card_type_id"`
	Quantity   int32 `json:"quantity"`
}

func (q *Queries) CreateDeckCard(ctx context.Context, arg CreateDeckCardParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createDeckCard,
		arg.DeckID,
		arg.CardID,
		arg.CardTypeID,
		arg.Quantity,
	)
}

const deleteDeck = `-- name: DeleteDeck :exec
DELETE FROM decks
WHERE id = ?
`

func (q *Queries) DeleteDeck(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDeck, id)
	return err
}

const deleteDeckCardsByDeckId = `-- name: DeleteDeckCardsByDeckId :exec
DELETE FROM deck_cards
WHERE deck_id = ?
`

func (q *Queries) DeleteDeckCardsByDeckId(ctx context.Context, deckID int64) error {
	_, err := q.db.ExecContext(ctx, deleteDeckCardsByDeckId, deckID)
	return err
}

const findALl = `-- name: FindALl :many
SELECT id, name, description, main_card_id, main_card_type_id, sub_card_id, sub_card_type_id, created_at, updated_at FROM decks
ORDER BY id DESC
`

func (q *Queries) FindALl(ctx context.Context) ([]Deck, error) {
	rows, err := q.db.QueryContext(ctx, findALl)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Deck{}
	for rows.Next() {
		var i Deck
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MainCardID,
			&i.MainCardTypeID,
			&i.SubCardID,
			&i.SubCardTypeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDeckById = `-- name: FindDeckById :one
SELECT id, name, description, main_card_id, main_card_type_id, sub_card_id, sub_card_type_id, created_at, updated_at FROM decks
WHERE id = ?
LIMIT 1
`

func (q *Queries) FindDeckById(ctx context.Context, id int64) (Deck, error) {
	row := q.db.QueryRowContext(ctx, findDeckById, id)
	var i Deck
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.MainCardID,
		&i.MainCardTypeID,
		&i.SubCardID,
		&i.SubCardTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findDeckCardsByDeckId = `-- name: FindDeckCardsByDeckId :many
SELECT id, deck_id, card_id, card_type_id, quantity, created_at, updated_at FROM deck_cards
WHERE deck_id = ?
`

func (q *Queries) FindDeckCardsByDeckId(ctx context.Context, deckID int64) ([]DeckCard, error) {
	rows, err := q.db.QueryContext(ctx, findDeckCardsByDeckId, deckID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DeckCard{}
	for rows.Next() {
		var i DeckCard
		if err := rows.Scan(
			&i.ID,
			&i.DeckID,
			&i.CardID,
			&i.CardTypeID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeck = `-- name: UpdateDeck :exec
UPDATE decks
SET 
  name = ?,
  description = ?,
  main_card_id = ?,
  main_card_type_id = ?,
  sub_card_id = ?,
  sub_card_type_id = ?
WHERE id = ?
`

type UpdateDeckParams struct {
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	MainCardID     sql.NullInt64  `json:"main_card_id"`
	MainCardTypeID sql.NullInt64  `json:"main_card_type_id"`
	SubCardID      sql.NullInt64  `json:"sub_card_id"`
	SubCardTypeID  sql.NullInt64  `json:"sub_card_type_id"`
	ID             int64          `json:"id"`
}

func (q *Queries) UpdateDeck(ctx context.Context, arg UpdateDeckParams) error {
	_, err := q.db.ExecContext(ctx, updateDeck,
		arg.Name,
		arg.Description,
		arg.MainCardID,
		arg.MainCardTypeID,
		arg.SubCardID,
		arg.SubCardTypeID,
		arg.ID,
	)
	return err
}
