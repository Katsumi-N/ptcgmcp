// Code generated by MockGen. DO NOT EDIT.
// Source: domain/inventory/trainer/trainer_repository.go
//
// Generated by this command:
//
//	mockgen -package trainer -source domain/inventory/trainer/trainer_repository.go -destination domain/inventory/trainer/mock_trainer_repository.go
//

// Package trainer is a generated GoMock package.
package trainer

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTrainerRepository is a mock of TrainerRepository interface.
type MockTrainerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTrainerRepositoryMockRecorder
	isgomock struct{}
}

// MockTrainerRepositoryMockRecorder is the mock recorder for MockTrainerRepository.
type MockTrainerRepositoryMockRecorder struct {
	mock *MockTrainerRepository
}

// NewMockTrainerRepository creates a new mock instance.
func NewMockTrainerRepository(ctrl *gomock.Controller) *MockTrainerRepository {
	mock := &MockTrainerRepository{ctrl: ctrl}
	mock.recorder = &MockTrainerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrainerRepository) EXPECT() *MockTrainerRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockTrainerRepository) FindById(ctx context.Context, trainerId int) (*Trainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, trainerId)
	ret0, _ := ret[0].(*Trainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTrainerRepositoryMockRecorder) FindById(ctx, trainerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTrainerRepository)(nil).FindById), ctx, trainerId)
}

// Save mocks base method.
func (m *MockTrainerRepository) Save(ctx context.Context, trainer *Trainer, userId string, quantity int, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, trainer, userId, quantity, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTrainerRepositoryMockRecorder) Save(ctx, trainer, userId, quantity, now any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTrainerRepository)(nil).Save), ctx, trainer, userId, quantity, now)
}
